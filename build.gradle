/*
 * Copyright (c) 2015 Mnubo. Released under MIT License.
 *
 *     Permission is hereby granted, free of charge, to any person obtaining a copy
 *     of this software and associated documentation files (the "Software"), to deal
 *     in the Software without restriction, including without limitation the rights
 *     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *     copies of the Software, and to permit persons to whom the Software is
 *     furnished to do so, subject to the following conditions:
 *
 *     The above copyright notice and this permission notice shall be included in
 *     all copies or substantial portions of the Software.
 *
 *     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *     THE SOFTWARE.
 */

// Required for the Android build tools
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.2'

    }
}
// Repositories where dependencies are downloaded
repositories {
    jcenter()
    maven {
        url 'http://repo.spring.io/milestone'
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}


apply plugin: 'com.android.library'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"
    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 21
        versionCode = VERSION_CODE
        versionName = getVersionName()
    }

    // Build all possible build variants
    //defaultPublishConfig "productionRelease"
    publishNonDefault true

    productFlavors {
        local
        staging
        production
    }

    sourceSets {
        main.setRoot('src/main')
        androidTest.setRoot('src/test')
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE' //jackson
        exclude 'META-INF/LICENSE' //jackson
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/ASL2.0'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "org.apache.httpcomponents:httpclient-android:$HTTP_CLIENT_ANDROID"

    compile "org.springframework.android:spring-android-rest-template:$SPRING_ANDROID_VERSION"
    compile("org.springframework.android:spring-android-auth:$SPRING_ANDROID_VERSION") {
        exclude group: 'org.springframework.social'
        exclude group: 'org.springframework', module: 'spring-core'
    }
    compile("org.springframework.social:spring-social-core:$SPRING_SOCIAL_CORE_VERSION") {
        exclude group: 'org.springframework', module: 'spring-web'
    }
    compile "org.apache.commons:commons-lang3:$COMMONS_LANG_VERSION"

    compile "com.fasterxml.jackson.core:jackson-databind:$JACKSON_VERSION"
    compile "com.github.daddykotex:geojson-jackson-android:$ANDROID_GEOJSON_VERSION@aar"
    compile "joda-time:joda-time:$JODATIME_VERSION"

    testCompile "junit:junit:$JUNIT_VERSION"
    testCompile("org.springframework:spring-test:$SPRING_TEST_VERSION") {
        exclude module: "spring-core"
    }
    testCompile "org.mockito:mockito-core:$MOCKITO_CORE_VERSION"
    testCompile "org.powermock:powermock-module-junit4:$POWERMOCK_VERSION"
    testCompile "org.powermock:powermock-api-mockito:$POWERMOCK_VERSION"
}

apply from: 'gradle/gradle-mvn-push.gradle'

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = 'src/main/java'
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar) + files(variant.sourceSets)
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://fasterxml.github.io/jackson-databind/javadoc/2.5/");
        options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")

        include "$variant.name"

        // exclude generated files
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
        exclude '**/*.md'

        // exclude any internal packages
        exclude '**/com/acme/sdk/api/**'
    }
}

